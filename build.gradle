buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://github.com/UKHomeOffice/pttg-gradle-repo/raw/master/releases" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'net.serenity-bdd:serenity-gradle-plugin:1.1.31'

        classpath 'pttg-gradle-common:pttgCommonGradle:1.8.RELEASE'
        classpath 'pttg-gradle-common:pttgApiDocsGradle:1.2.RELEASE'
        classpath 'pttg-gradle-common:pttgSpringBootGradle:1.3.RELEASE'

        // This shouldn't be needed. It should pull transitively from the plugin. Don't know why it isn't working.
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:1.5.3"
        classpath "org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.11"

        classpath 'org.owasp:dependency-check-gradle:1.4.3'
    }
}

apply plugin: 'pttgCommonGradle'
apply plugin: 'pttgSpringBootGradle'
apply plugin: 'pttgApiDocsGradle'
apply plugin: 'net.serenity-bdd.aggregator'
apply plugin: 'org.owasp.dependencycheck'

apply plugin: 'org.ajoberstar.github-pages'

group 'pttg-ip-api'
version = '0.1.0'

mainClassName = "uk.gov.digital.ho.proving.income.ServiceRunner"

dependencies {
    compile "org.codehaus.groovy:groovy-all:2.4.3"
    compile "org.json:json:20160212"

    compile "ch.qos.logback:logback-classic:1.1.3"
    compile "ch.qos.logback:logback-core:1.1.3"
    compile "org.slf4j:slf4j-parent:1.7.14"

    compile "com.fasterxml.jackson.core:jackson-annotations:2.7.4"
    compile "com.fasterxml.jackson.core:jackson-databind:2.7.4"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.7.4"
    compile "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.7.4"

    compile "com.sun.jersey:jersey-client:1.19"
    compile "org.glassfish.jersey.media:jersey-media-json-jackson:2.22.2"

    compile "org.mongodb:bson:3.0.4"
    compile "org.mongodb:mongodb-driver:3.0.4"

    compile "org.springframework.boot:spring-boot:1.4.1.RELEASE"
    compile "org.springframework.boot:spring-boot-starter-web:1.4.1.RELEASE"
    compile 'com.google.guava:guava:19.0'
    compile 'org.apache.httpcomponents:httpclient:4.5.2'
    compile 'net.logstash.logback:logstash-logback-encoder:4.7'


    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'com.jayway.jsonpath:json-path:2.2.0'
    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-all:1.10.19:"
    testCompile 'org.assertj:assertj-core:3.4.1'
    testCompile 'nl.jqno.equalsverifier:equalsverifier:1.7.2'

    testCompile "org.springframework:spring-test:4.3.3.RELEASE"
    testCompile "org.springframework.boot:spring-boot-starter-test:1.4.1.RELEASE"

    testCompile "com.jayway.restassured:json-schema-validator:2.9.0"
    testCompile "com.jayway.restassured:rest-assured:2.9.0"

    testCompile "org.spockframework:spock-core:1.1-groovy-2.4-rc-3"
    testCompile "org.spockframework:spock-spring:1.1-groovy-2.4-rc-3"
    testCompile "cglib:cglib-nodep:3.2.1"
    testCompile "org.objenesis:objenesis:2.2"

    testCompile "info.cukes:cucumber-java:1.2.4"
    testCompile "info.cukes:cucumber-junit:1.2.4"
    testCompile "info.cukes:gherkin:2.12.2"
    testCompile "net.serenity-bdd:serenity-core:1.1.31"
    testCompile "net.serenity-bdd:serenity-cucumber:1.1.6"
    testCompile "net.serenity-bdd:serenity-junit:1.1.31"
    testCompile "net.serenity-bdd:serenity-spring:1.1.31"
    testCompile "org.codehaus.groovy.modules.http-builder:http-builder:0.7.1"
    testCompile "com.github.tomakehurst:wiremock:1.58"
}

springboot {
    port = 8080
}

test {
    exclude 'acceptance/**'
}

task accept(type: Test) {
    include 'acceptance/**'
    finalizedBy aggregate
    outputs.upToDateWhen { false }
}

task acceptanceTest(type: Test) {
    description 'Runs the acceptance tests.'
    dependsOn 'accept'
    group 'verification'
    include 'acceptance/**'
    outputs.upToDateWhen { false }
}

if (System.getenv('VERSION')) {
    version = System.getenv('VERSION')
}
if (System.getenv('BUILD_NUMBER')) {
    version = version + '-' + System.getenv('BUILD_NUMBER')
}
if (System.getenv('GIT_COMMIT')) {
    version = version + '.' + System.getenv('GIT_COMMIT')
}

tasks.withType(Jar) {
    manifest {
        attributes(
            'Implementation-Title': "${jar.baseName}",
            'Implementation-Version': version
        )
    }
}

apidocs {
    jarDocsDir = 'static'
    jarAppendix = 'docs'
}

task buildSpringBootWithApiDocs(type: BootRepackage, dependsOn: buildWithApiDocs) {
    group 'build'
    description 'Builds the jar as a Spring Boot executable jar containing the api docs'
}

tasks.withType(JavaCompile) {

    options.fork = true  // Fork your compilation into a child process
    options.forkOptions.setMemoryMaximumSize("256m")
}

tasks.withType(GroovyCompile) {

    options.fork = true  // Fork your compilation into a child process
    options.forkOptions.setMemoryMaximumSize("256m")
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.with {
        force = true
        additionalParameters = ["-Xmax-classfile-name", "127"]
        forkOptions.setMemoryMaximumSize("256m")
    }
}

test {
    exclude 'acceptance/**'
    maxHeapSize = "256m"
}

githubPages {

    com.jcraft.jsch.JSch.setConfig("StrictHostKeyChecking", "no")
    System.setProperty("org.ajoberstar.grgit.auth.force", "sshagent")
  //  System.setProperty("org.ajoberstar.grgit.auth.ssh.private", "token.txt")

    repoUri = 'git@github.com:UKHomeOffice/pttg-ip-api.git'
    targetBranch = 'gh-pages'

//    credentials {
//       username = System.env.PTTG_GH_TOKEN
//       password = ''
//    }

    pages {
        from ('docs') {
            into '/'
        }
        from ('build/reports/test') {
            into 'test'
        }
        from ('build/asciidoc/html5/index.html') {
            into 'api'
        }
        from ('target/site/serenity') {
            into 'cucumber'
        }
    }
}
