buildscript {

    ext {
        springBootVersion = '1.5.8.RELEASE'
        springRestDocsVersion = '1.1.0.RELEASE'
        jarDocsDir = 'static'
        jarAppendix = 'docs'
        testSrcPattern = 'apidocs/**'
        sourceDocsDir = 'src/doc'
        jarDocsDir = 'static/docs'
        snippetsDir = 'build/generated-snippets'
        jarAppendix = 'docs'
    }

    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "http://repo.spring.io/plugins-release" }
        maven { url 'https://repo.spring.io/libs-milestone' }

    }
    dependencies {

        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE")
        classpath 'net.serenity-bdd:serenity-gradle-plugin:1.1.31'

        // This shouldn't be needed. It should pull transitively from the plugin. Don't know why it isn't working.
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:1.5.3"
        classpath "org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.11"
        classpath 'net.linguica.gradle:maven-settings-plugin:0.5'
        classpath 'org.owasp:dependency-check-gradle:1.4.3'
    }
}


plugins {
    id "java"
    id "com.gorylenko.gradle-git-properties" version "1.4.17"
    id 'net.researchgate.release' version '2.6.0'
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'net.serenity-bdd.aggregator'
apply plugin: 'net.linguica.maven-settings'
apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'application'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'project-report'
apply plugin: 'checkstyle'

group 'pttg-ip-api'

mainClassName = "uk.gov.digital.ho.proving.income.ServiceRunner"


springBoot {
    buildInfo()
}

dependencies {

    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.16.12'
    compileOnly 'org.projectlombok:lombok:1.16.12'

    compile "org.codehaus.groovy:groovy-all:2.4.3"
    compile "org.json:json:20160212"

    compile "ch.qos.logback:logback-classic:1.1.3"
    compile "ch.qos.logback:logback-core:1.1.3"
    compile "org.slf4j:slf4j-parent:1.7.14"

    compile "com.fasterxml.jackson.core:jackson-annotations:2.9.5"
    compile "com.fasterxml.jackson.core:jackson-databind:2.9.5"
    compile "com.fasterxml.jackson.core:jackson-core:2.9.5"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.5"
    compile "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.9.5"

    compile "com.sun.jersey:jersey-client:1.19"
    compile "org.glassfish.jersey.media:jersey-media-json-jackson:2.22.2"

    compile "org.aspectj:aspectjrt:1.8.9"
    compile "org.aspectj:aspectjweaver:1.8.9"

    compile 'org.apache.httpcomponents:httpclient:4.5.2'

    compile 'net.logstash.logback:logstash-logback-encoder:4.7'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.+'

    compile group: 'org.springframework.boot', name: 'spring-boot'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-jetty'
    compile group: 'org.springframework.boot', name: 'spring-boot-devtools'

    compile group: 'org.springframework', name: 'spring-aspects', version: '3.2.0.RELEASE'
    compile group: 'org.springframework.retry', name: 'spring-retry', version: '1.2.0.RELEASE'

    compile 'net.sf.supercsv:super-csv:2.4.0'


    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-core:2.16.0"
    testCompile 'org.assertj:assertj-core:3.11.1'
    testCompile 'nl.jqno.equalsverifier:equalsverifier:1.7.2'

    testCompile "com.jayway.restassured:json-schema-validator:2.9.0"
    testCompile "com.jayway.restassured:rest-assured:2.9.0"

    testCompile group: 'org.spockframework', name: 'spock-core', version: '1.1-groovy-2.4'
    testCompile group: 'org.spockframework', name: 'spock-spring', version: '1.1-groovy-2.4'
    testCompile "cglib:cglib-nodep:3.2.1"
    testCompile "org.objenesis:objenesis:2.2"

    testCompile "info.cukes:cucumber-java:1.2.4"
    testCompile "info.cukes:cucumber-junit:1.2.4"
    testCompile "info.cukes:gherkin:2.12.2"
    testCompile "net.serenity-bdd:serenity-core:1.1.31"
    testCompile "net.serenity-bdd:serenity-cucumber:1.1.6"
    testCompile "net.serenity-bdd:serenity-junit:1.1.31"
    testCompile "net.serenity-bdd:serenity-spring:1.1.31"
    testCompile "org.codehaus.groovy.modules.http-builder:http-builder:0.7.1"
    testCompile "com.github.tomakehurst:wiremock:2.4.1"

    testCompile "org.springframework:spring-test:4.3.10.RELEASE"
    testCompile "org.springframework.boot:spring-boot-starter-test:$springBootVersion"

    testCompile "org.springframework.restdocs:spring-restdocs-core:$springRestDocsVersion"
    testCompile "org.springframework.restdocs:spring-restdocs-restassured:$springRestDocsVersion"
}

test {
    exclude 'acceptance/**'
}

task accept(type: Test) {
    include 'acceptance/**'
    finalizedBy aggregate
    outputs.upToDateWhen { false }
}

task testCucumber(type: Test) {
    include 'acceptance/AcceptanceTests*'
    finalizedBy aggregate
    outputs.upToDateWhen { false }
}

build.dependsOn(testCucumber)

task acceptanceTest(type: Test) {
    description 'Runs the acceptance tests.'
    dependsOn 'accept'
    group 'verification'
    include 'acceptance/**'
    outputs.upToDateWhen { false }
}

if (System.getenv('VERSION')) {
    version = System.getenv('VERSION')
}
if (System.getenv('BUILD_NUMBER')) {
    version = version + '-' + System.getenv('BUILD_NUMBER')
}
if (System.getenv('GIT_COMMIT')) {
    version = version + '.' + System.getenv('GIT_COMMIT')
}

tasks.withType(Jar) {
    manifest {
        attributes(
            'Implementation-Title': "${jar.baseName}",
            'Implementation-Version': version
        )
    }
}

tasks.withType(JavaCompile) {

    options.fork = true  // Fork your compilation into a child process
    options.forkOptions.setMemoryMaximumSize("256m")
}

tasks.withType(GroovyCompile) {

    options.fork = true  // Fork your compilation into a child process
    options.forkOptions.setMemoryMaximumSize("256m")
}

test {
    exclude 'acceptance/**'
    maxHeapSize = "256m"
}

task('apiDocTest', type: Test) {
    description 'Runs the API documentation tests (generates doc snippets to build/generated-snippets but does not process into HTML)'
    group 'verification'
    include "${testSrcPattern}"
    classpath = sourceSets.test.runtimeClasspath + project.files("${sourceDocsDir}/resources")
}

task('generateApiDocs', dependsOn: ['apiDocTest', 'asciidoctor']) {
    description 'Generates the API documentation - look in build/asciidoc for the output'
    group 'documentation'
}

asciidoctor {
    description 'You should use the generateApiDocs task instead'
    attributes 'snippets': project.file("${snippetsDir}")
    inputs.dir project.file("${snippetsDir}")
    outputDir 'build/asciidoc'
    sourceDir "${sourceDocsDir}/asciidoc"
    backends 'pdf', 'html5'
    mustRunAfter 'apiDocTest'

}


task('buildWithApiDocs', type: Jar, dependsOn: ['generateApiDocs', 'build']) {
    description 'Same as build but also generates API docs and adds them to the jar'
    group 'build'

    destinationDir = new File("build/libs/")

    project.afterEvaluate { // Wait for regular jar task to be evaluated first

        baseName = jar.baseName
        appendix = "${jarAppendix}"
        version = jar.version

        from zipTree(jar.archivePath)
        from("${asciidoctor.outputDir}/html5/index.html") { into "${jarDocsDir}" }
        from("${asciidoctor.outputDir}/pdf/index.pdf") { into "${jarDocsDir}" }
    }
}

task buildSpringBootWithApiDocs(type: BootRepackage, dependsOn: buildWithApiDocs) {
    group 'build'
    description 'Builds the jar as a Spring Boot executable jar containing the api docs'
}

checkstyleTest.enabled = false
checkstyle {
    toolVersion = "5.9"
    ignoreFailures = false
}

release {
    preTagCommitMessage = '[Gradle Release Plugin] (EE-21422) [CI SKIP] - pre tag commit: '
    tagCommitMessage = '[Gradle Release Plugin] (EE-21422) - creating tag: '
    newVersionCommitMessage = '[Gradle Release Plugin] (EE-21422) [CI SKIP] - new version commit: '
}
